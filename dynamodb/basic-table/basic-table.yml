AWSTemplateFormatVersion: 2010-09-09
Description: aws-play (make a basic table and operate on it with a lambda)

Parameters:
  LambdaFunctionName:
    Type: String
    AllowedPattern: ^[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+$
    Default: aws-play-basic-table

  TableName:
    Type: String
    Default: bookfinder-table

  ZipBucketName:
    Type: String
    Default: losalamosal-aws-play-uploads # bucket must exist with versioning enabled

  ZipVersionId:
    Type: String

  ZipS3Key:
    Type: String
    Default: lambda.zip

Resources:
  BookFinderTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      TableName: !Ref TableName
      AttributeDefinitions:
        - AttributeName: "Id"
          AttributeType: "S"
        - AttributeName: "Image"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "Id"
          KeyType: "HASH"
        - AttributeName: "Image"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  # TODO: make the versioned lambda upload bucket
  BasicTableLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaExecuteAndDynamoDB
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      # So lambda can write logs
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: writeToDynamoDB
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:DescribeTable
                Resource:
                  - !GetAtt BookFinderTable.Arn
                  # The following Resource specification didn't work even though it looks valid
                  # in the error logs. A wildcard Resource ("*") worked OK. Had to use the !GetAttr
                  # version above to get this policy to work??? It appears that the empty slots for
                  # region and account were not automatically populated. Check the Outputs section
                  # at the bottom of this file for good and bad versions of this Resource.
                  # - !Sub "arn:${AWS::Partition}:dynamodb:::table/${TableName}"

  BasicTableLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LambdaFunctionName
      Role: !GetAtt BasicTableLambdaRole.Arn
      Runtime: nodejs16.x
      Environment:
        Variables:
          DB_TABLE_NAME: !Ref TableName
      Handler: index.handler
      Code:
        S3Bucket: !Ref ZipBucketName
        S3Key: !Ref ZipS3Key
        S3ObjectVersion: !Ref ZipVersionId
      MemorySize: 128
      Timeout: 30

  BasicTableLimitRetries:
    Type: AWS::Lambda::EventInvokeConfig
    Properties:
      FunctionName: !Ref BasicTableLambda
      MaximumRetryAttempts: 0
      Qualifier: "$LATEST"

  # Thanks https://ldoughty.com/2020/01/aws-http-api-gateway-cloudformation-setup/
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Join [/, ["/aws/lambda", !Ref BasicTableLambda]]
      RetentionInDays: 3

Outputs:
  GoodDBArn:
    Value: !GetAtt BookFinderTable.Arn
  BadDBArn:
    Value: !Sub "arn:${AWS::Partition}:dynamodb:::table/${TableName}"
